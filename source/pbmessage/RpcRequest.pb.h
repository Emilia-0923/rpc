// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RpcRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RpcRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RpcRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RpcRequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RpcRequest_2eproto;
namespace msg {
class RpcRequest;
struct RpcRequestDefaultTypeInternal;
extern RpcRequestDefaultTypeInternal _RpcRequest_default_instance_;
class ServiceRequest;
struct ServiceRequestDefaultTypeInternal;
extern ServiceRequestDefaultTypeInternal _ServiceRequest_default_instance_;
class ServiceRequest_Address;
struct ServiceRequest_AddressDefaultTypeInternal;
extern ServiceRequest_AddressDefaultTypeInternal _ServiceRequest_Address_default_instance_;
class TopicRequest;
struct TopicRequestDefaultTypeInternal;
extern TopicRequestDefaultTypeInternal _TopicRequest_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::RpcRequest* Arena::CreateMaybeMessage<::msg::RpcRequest>(Arena*);
template<> ::msg::ServiceRequest* Arena::CreateMaybeMessage<::msg::ServiceRequest>(Arena*);
template<> ::msg::ServiceRequest_Address* Arena::CreateMaybeMessage<::msg::ServiceRequest_Address>(Arena*);
template<> ::msg::TopicRequest* Arena::CreateMaybeMessage<::msg::TopicRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum TopicRequest_TopicOptype : int {
  TopicRequest_TopicOptype_CREATE = 0,
  TopicRequest_TopicOptype_REMOVE = 1,
  TopicRequest_TopicOptype_SUBSCRIBE = 2,
  TopicRequest_TopicOptype_UNSUBSCRIBE = 3,
  TopicRequest_TopicOptype_PUBLISH = 4,
  TopicRequest_TopicOptype_TopicRequest_TopicOptype_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TopicRequest_TopicOptype_TopicRequest_TopicOptype_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TopicRequest_TopicOptype_IsValid(int value);
constexpr TopicRequest_TopicOptype TopicRequest_TopicOptype_TopicOptype_MIN = TopicRequest_TopicOptype_CREATE;
constexpr TopicRequest_TopicOptype TopicRequest_TopicOptype_TopicOptype_MAX = TopicRequest_TopicOptype_PUBLISH;
constexpr int TopicRequest_TopicOptype_TopicOptype_ARRAYSIZE = TopicRequest_TopicOptype_TopicOptype_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TopicRequest_TopicOptype_descriptor();
template<typename T>
inline const std::string& TopicRequest_TopicOptype_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TopicRequest_TopicOptype>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TopicRequest_TopicOptype_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TopicRequest_TopicOptype_descriptor(), enum_t_value);
}
inline bool TopicRequest_TopicOptype_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TopicRequest_TopicOptype* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TopicRequest_TopicOptype>(
    TopicRequest_TopicOptype_descriptor(), name, value);
}
enum ServiceRequest_ServiceOptype : int {
  ServiceRequest_ServiceOptype_REGISTRY = 0,
  ServiceRequest_ServiceOptype_DISCOVERY = 1,
  ServiceRequest_ServiceOptype_ONLINE = 2,
  ServiceRequest_ServiceOptype_OFFLINE = 3,
  ServiceRequest_ServiceOptype_ServiceRequest_ServiceOptype_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServiceRequest_ServiceOptype_ServiceRequest_ServiceOptype_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServiceRequest_ServiceOptype_IsValid(int value);
constexpr ServiceRequest_ServiceOptype ServiceRequest_ServiceOptype_ServiceOptype_MIN = ServiceRequest_ServiceOptype_REGISTRY;
constexpr ServiceRequest_ServiceOptype ServiceRequest_ServiceOptype_ServiceOptype_MAX = ServiceRequest_ServiceOptype_OFFLINE;
constexpr int ServiceRequest_ServiceOptype_ServiceOptype_ARRAYSIZE = ServiceRequest_ServiceOptype_ServiceOptype_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceRequest_ServiceOptype_descriptor();
template<typename T>
inline const std::string& ServiceRequest_ServiceOptype_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceRequest_ServiceOptype>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceRequest_ServiceOptype_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceRequest_ServiceOptype_descriptor(), enum_t_value);
}
inline bool ServiceRequest_ServiceOptype_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceRequest_ServiceOptype* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceRequest_ServiceOptype>(
    ServiceRequest_ServiceOptype_descriptor(), name, value);
}
// ===================================================================

class RpcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.RpcRequest) */ {
 public:
  inline RpcRequest() : RpcRequest(nullptr) {}
  ~RpcRequest() override;
  explicit PROTOBUF_CONSTEXPR RpcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcRequest(const RpcRequest& from);
  RpcRequest(RpcRequest&& from) noexcept
    : RpcRequest() {
    *this = ::std::move(from);
  }

  inline RpcRequest& operator=(const RpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcRequest& operator=(RpcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcRequest* internal_default_instance() {
    return reinterpret_cast<const RpcRequest*>(
               &_RpcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcRequest& a, RpcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcRequest& from) {
    RpcRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.RpcRequest";
  }
  protected:
  explicit RpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kMethodFieldNumber = 1,
  };
  // repeated string params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  const std::string& params(int index) const;
  std::string* mutable_params(int index);
  void set_params(int index, const std::string& value);
  void set_params(int index, std::string&& value);
  void set_params(int index, const char* value);
  void set_params(int index, const char* value, size_t size);
  std::string* add_params();
  void add_params(const std::string& value);
  void add_params(std::string&& value);
  void add_params(const char* value);
  void add_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_params();
  private:
  const std::string& _internal_params(int index) const;
  std::string* _internal_add_params();
  public:

  // optional string method = 1;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // @@protoc_insertion_point(class_scope:msg.RpcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RpcRequest_2eproto;
};
// -------------------------------------------------------------------

class TopicRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TopicRequest) */ {
 public:
  inline TopicRequest() : TopicRequest(nullptr) {}
  ~TopicRequest() override;
  explicit PROTOBUF_CONSTEXPR TopicRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicRequest(const TopicRequest& from);
  TopicRequest(TopicRequest&& from) noexcept
    : TopicRequest() {
    *this = ::std::move(from);
  }

  inline TopicRequest& operator=(const TopicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicRequest& operator=(TopicRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicRequest* internal_default_instance() {
    return reinterpret_cast<const TopicRequest*>(
               &_TopicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TopicRequest& a, TopicRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopicRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TopicRequest& from) {
    TopicRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TopicRequest";
  }
  protected:
  explicit TopicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TopicRequest_TopicOptype TopicOptype;
  static constexpr TopicOptype CREATE =
    TopicRequest_TopicOptype_CREATE;
  static constexpr TopicOptype REMOVE =
    TopicRequest_TopicOptype_REMOVE;
  static constexpr TopicOptype SUBSCRIBE =
    TopicRequest_TopicOptype_SUBSCRIBE;
  static constexpr TopicOptype UNSUBSCRIBE =
    TopicRequest_TopicOptype_UNSUBSCRIBE;
  static constexpr TopicOptype PUBLISH =
    TopicRequest_TopicOptype_PUBLISH;
  static inline bool TopicOptype_IsValid(int value) {
    return TopicRequest_TopicOptype_IsValid(value);
  }
  static constexpr TopicOptype TopicOptype_MIN =
    TopicRequest_TopicOptype_TopicOptype_MIN;
  static constexpr TopicOptype TopicOptype_MAX =
    TopicRequest_TopicOptype_TopicOptype_MAX;
  static constexpr int TopicOptype_ARRAYSIZE =
    TopicRequest_TopicOptype_TopicOptype_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TopicOptype_descriptor() {
    return TopicRequest_TopicOptype_descriptor();
  }
  template<typename T>
  static inline const std::string& TopicOptype_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TopicOptype>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TopicOptype_Name.");
    return TopicRequest_TopicOptype_Name(enum_t_value);
  }
  static inline bool TopicOptype_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TopicOptype* value) {
    return TopicRequest_TopicOptype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kMessageFieldNumber = 3,
    kOptypeFieldNumber = 2,
  };
  // optional string topic = 1;
  bool has_topic() const;
  private:
  bool _internal_has_topic() const;
  public:
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // optional string message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional .msg.TopicRequest.TopicOptype optype = 2;
  bool has_optype() const;
  private:
  bool _internal_has_optype() const;
  public:
  void clear_optype();
  ::msg::TopicRequest_TopicOptype optype() const;
  void set_optype(::msg::TopicRequest_TopicOptype value);
  private:
  ::msg::TopicRequest_TopicOptype _internal_optype() const;
  void _internal_set_optype(::msg::TopicRequest_TopicOptype value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TopicRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int optype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RpcRequest_2eproto;
};
// -------------------------------------------------------------------

class ServiceRequest_Address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ServiceRequest.Address) */ {
 public:
  inline ServiceRequest_Address() : ServiceRequest_Address(nullptr) {}
  ~ServiceRequest_Address() override;
  explicit PROTOBUF_CONSTEXPR ServiceRequest_Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceRequest_Address(const ServiceRequest_Address& from);
  ServiceRequest_Address(ServiceRequest_Address&& from) noexcept
    : ServiceRequest_Address() {
    *this = ::std::move(from);
  }

  inline ServiceRequest_Address& operator=(const ServiceRequest_Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceRequest_Address& operator=(ServiceRequest_Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceRequest_Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceRequest_Address* internal_default_instance() {
    return reinterpret_cast<const ServiceRequest_Address*>(
               &_ServiceRequest_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServiceRequest_Address& a, ServiceRequest_Address& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceRequest_Address* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceRequest_Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceRequest_Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceRequest_Address>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceRequest_Address& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceRequest_Address& from) {
    ServiceRequest_Address::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceRequest_Address* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ServiceRequest.Address";
  }
  protected:
  explicit ServiceRequest_Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // optional string ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional uint32 port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ServiceRequest.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    uint32_t port_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RpcRequest_2eproto;
};
// -------------------------------------------------------------------

class ServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ServiceRequest) */ {
 public:
  inline ServiceRequest() : ServiceRequest(nullptr) {}
  ~ServiceRequest() override;
  explicit PROTOBUF_CONSTEXPR ServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceRequest(const ServiceRequest& from);
  ServiceRequest(ServiceRequest&& from) noexcept
    : ServiceRequest() {
    *this = ::std::move(from);
  }

  inline ServiceRequest& operator=(const ServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceRequest& operator=(ServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceRequest* internal_default_instance() {
    return reinterpret_cast<const ServiceRequest*>(
               &_ServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServiceRequest& a, ServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceRequest& from) {
    ServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ServiceRequest";
  }
  protected:
  explicit ServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServiceRequest_Address Address;

  typedef ServiceRequest_ServiceOptype ServiceOptype;
  static constexpr ServiceOptype REGISTRY =
    ServiceRequest_ServiceOptype_REGISTRY;
  static constexpr ServiceOptype DISCOVERY =
    ServiceRequest_ServiceOptype_DISCOVERY;
  static constexpr ServiceOptype ONLINE =
    ServiceRequest_ServiceOptype_ONLINE;
  static constexpr ServiceOptype OFFLINE =
    ServiceRequest_ServiceOptype_OFFLINE;
  static inline bool ServiceOptype_IsValid(int value) {
    return ServiceRequest_ServiceOptype_IsValid(value);
  }
  static constexpr ServiceOptype ServiceOptype_MIN =
    ServiceRequest_ServiceOptype_ServiceOptype_MIN;
  static constexpr ServiceOptype ServiceOptype_MAX =
    ServiceRequest_ServiceOptype_ServiceOptype_MAX;
  static constexpr int ServiceOptype_ARRAYSIZE =
    ServiceRequest_ServiceOptype_ServiceOptype_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ServiceOptype_descriptor() {
    return ServiceRequest_ServiceOptype_descriptor();
  }
  template<typename T>
  static inline const std::string& ServiceOptype_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServiceOptype>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServiceOptype_Name.");
    return ServiceRequest_ServiceOptype_Name(enum_t_value);
  }
  static inline bool ServiceOptype_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ServiceOptype* value) {
    return ServiceRequest_ServiceOptype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 1,
    kAddressFieldNumber = 3,
    kOptypeFieldNumber = 2,
  };
  // optional string method = 1;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // optional .msg.ServiceRequest.Address address = 3;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::msg::ServiceRequest_Address& address() const;
  PROTOBUF_NODISCARD ::msg::ServiceRequest_Address* release_address();
  ::msg::ServiceRequest_Address* mutable_address();
  void set_allocated_address(::msg::ServiceRequest_Address* address);
  private:
  const ::msg::ServiceRequest_Address& _internal_address() const;
  ::msg::ServiceRequest_Address* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::msg::ServiceRequest_Address* address);
  ::msg::ServiceRequest_Address* unsafe_arena_release_address();

  // optional .msg.ServiceRequest.ServiceOptype optype = 2;
  bool has_optype() const;
  private:
  bool _internal_has_optype() const;
  public:
  void clear_optype();
  ::msg::ServiceRequest_ServiceOptype optype() const;
  void set_optype(::msg::ServiceRequest_ServiceOptype value);
  private:
  ::msg::ServiceRequest_ServiceOptype _internal_optype() const;
  void _internal_set_optype(::msg::ServiceRequest_ServiceOptype value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
    ::msg::ServiceRequest_Address* address_;
    int optype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RpcRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcRequest

// optional string method = 1;
inline bool RpcRequest::_internal_has_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcRequest::has_method() const {
  return _internal_has_method();
}
inline void RpcRequest::clear_method() {
  _impl_.method_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcRequest::method() const {
  // @@protoc_insertion_point(field_get:msg.RpcRequest.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcRequest::set_method(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.RpcRequest.method)
}
inline std::string* RpcRequest::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:msg.RpcRequest.method)
  return _s;
}
inline const std::string& RpcRequest::_internal_method() const {
  return _impl_.method_.Get();
}
inline void RpcRequest::_internal_set_method(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.method_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcRequest::_internal_mutable_method() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.method_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcRequest::release_method() {
  // @@protoc_insertion_point(field_release:msg.RpcRequest.method)
  if (!_internal_has_method()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.method_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcRequest::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.RpcRequest.method)
}

// repeated string params = 2;
inline int RpcRequest::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int RpcRequest::params_size() const {
  return _internal_params_size();
}
inline void RpcRequest::clear_params() {
  _impl_.params_.Clear();
}
inline std::string* RpcRequest::add_params() {
  std::string* _s = _internal_add_params();
  // @@protoc_insertion_point(field_add_mutable:msg.RpcRequest.params)
  return _s;
}
inline const std::string& RpcRequest::_internal_params(int index) const {
  return _impl_.params_.Get(index);
}
inline const std::string& RpcRequest::params(int index) const {
  // @@protoc_insertion_point(field_get:msg.RpcRequest.params)
  return _internal_params(index);
}
inline std::string* RpcRequest::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:msg.RpcRequest.params)
  return _impl_.params_.Mutable(index);
}
inline void RpcRequest::set_params(int index, const std::string& value) {
  _impl_.params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.RpcRequest.params)
}
inline void RpcRequest::set_params(int index, std::string&& value) {
  _impl_.params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.RpcRequest.params)
}
inline void RpcRequest::set_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.RpcRequest.params)
}
inline void RpcRequest::set_params(int index, const char* value, size_t size) {
  _impl_.params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.RpcRequest.params)
}
inline std::string* RpcRequest::_internal_add_params() {
  return _impl_.params_.Add();
}
inline void RpcRequest::add_params(const std::string& value) {
  _impl_.params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.RpcRequest.params)
}
inline void RpcRequest::add_params(std::string&& value) {
  _impl_.params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.RpcRequest.params)
}
inline void RpcRequest::add_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.RpcRequest.params)
}
inline void RpcRequest::add_params(const char* value, size_t size) {
  _impl_.params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.RpcRequest.params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RpcRequest::params() const {
  // @@protoc_insertion_point(field_list:msg.RpcRequest.params)
  return _impl_.params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RpcRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:msg.RpcRequest.params)
  return &_impl_.params_;
}

// -------------------------------------------------------------------

// TopicRequest

// optional string topic = 1;
inline bool TopicRequest::_internal_has_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TopicRequest::has_topic() const {
  return _internal_has_topic();
}
inline void TopicRequest::clear_topic() {
  _impl_.topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TopicRequest::topic() const {
  // @@protoc_insertion_point(field_get:msg.TopicRequest.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicRequest::set_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TopicRequest.topic)
}
inline std::string* TopicRequest::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:msg.TopicRequest.topic)
  return _s;
}
inline const std::string& TopicRequest::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void TopicRequest::_internal_set_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicRequest::_internal_mutable_topic() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicRequest::release_topic() {
  // @@protoc_insertion_point(field_release:msg.TopicRequest.topic)
  if (!_internal_has_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicRequest::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TopicRequest.topic)
}

// optional .msg.TopicRequest.TopicOptype optype = 2;
inline bool TopicRequest::_internal_has_optype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TopicRequest::has_optype() const {
  return _internal_has_optype();
}
inline void TopicRequest::clear_optype() {
  _impl_.optype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::msg::TopicRequest_TopicOptype TopicRequest::_internal_optype() const {
  return static_cast< ::msg::TopicRequest_TopicOptype >(_impl_.optype_);
}
inline ::msg::TopicRequest_TopicOptype TopicRequest::optype() const {
  // @@protoc_insertion_point(field_get:msg.TopicRequest.optype)
  return _internal_optype();
}
inline void TopicRequest::_internal_set_optype(::msg::TopicRequest_TopicOptype value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.optype_ = value;
}
inline void TopicRequest::set_optype(::msg::TopicRequest_TopicOptype value) {
  _internal_set_optype(value);
  // @@protoc_insertion_point(field_set:msg.TopicRequest.optype)
}

// optional string message = 3;
inline bool TopicRequest::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TopicRequest::has_message() const {
  return _internal_has_message();
}
inline void TopicRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TopicRequest::message() const {
  // @@protoc_insertion_point(field_get:msg.TopicRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicRequest::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TopicRequest.message)
}
inline std::string* TopicRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:msg.TopicRequest.message)
  return _s;
}
inline const std::string& TopicRequest::_internal_message() const {
  return _impl_.message_.Get();
}
inline void TopicRequest::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicRequest::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicRequest::release_message() {
  // @@protoc_insertion_point(field_release:msg.TopicRequest.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TopicRequest.message)
}

// -------------------------------------------------------------------

// ServiceRequest_Address

// optional string ip = 1;
inline bool ServiceRequest_Address::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceRequest_Address::has_ip() const {
  return _internal_has_ip();
}
inline void ServiceRequest_Address::clear_ip() {
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceRequest_Address::ip() const {
  // @@protoc_insertion_point(field_get:msg.ServiceRequest.Address.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceRequest_Address::set_ip(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ServiceRequest.Address.ip)
}
inline std::string* ServiceRequest_Address::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:msg.ServiceRequest.Address.ip)
  return _s;
}
inline const std::string& ServiceRequest_Address::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void ServiceRequest_Address::_internal_set_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceRequest_Address::_internal_mutable_ip() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceRequest_Address::release_ip() {
  // @@protoc_insertion_point(field_release:msg.ServiceRequest.Address.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceRequest_Address::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ServiceRequest.Address.ip)
}

// optional uint32 port = 2;
inline bool ServiceRequest_Address::_internal_has_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServiceRequest_Address::has_port() const {
  return _internal_has_port();
}
inline void ServiceRequest_Address::clear_port() {
  _impl_.port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ServiceRequest_Address::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t ServiceRequest_Address::port() const {
  // @@protoc_insertion_point(field_get:msg.ServiceRequest.Address.port)
  return _internal_port();
}
inline void ServiceRequest_Address::_internal_set_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.port_ = value;
}
inline void ServiceRequest_Address::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:msg.ServiceRequest.Address.port)
}

// -------------------------------------------------------------------

// ServiceRequest

// optional string method = 1;
inline bool ServiceRequest::_internal_has_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceRequest::has_method() const {
  return _internal_has_method();
}
inline void ServiceRequest::clear_method() {
  _impl_.method_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceRequest::method() const {
  // @@protoc_insertion_point(field_get:msg.ServiceRequest.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceRequest::set_method(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ServiceRequest.method)
}
inline std::string* ServiceRequest::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:msg.ServiceRequest.method)
  return _s;
}
inline const std::string& ServiceRequest::_internal_method() const {
  return _impl_.method_.Get();
}
inline void ServiceRequest::_internal_set_method(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.method_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceRequest::_internal_mutable_method() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.method_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceRequest::release_method() {
  // @@protoc_insertion_point(field_release:msg.ServiceRequest.method)
  if (!_internal_has_method()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.method_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceRequest::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ServiceRequest.method)
}

// optional .msg.ServiceRequest.ServiceOptype optype = 2;
inline bool ServiceRequest::_internal_has_optype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServiceRequest::has_optype() const {
  return _internal_has_optype();
}
inline void ServiceRequest::clear_optype() {
  _impl_.optype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::msg::ServiceRequest_ServiceOptype ServiceRequest::_internal_optype() const {
  return static_cast< ::msg::ServiceRequest_ServiceOptype >(_impl_.optype_);
}
inline ::msg::ServiceRequest_ServiceOptype ServiceRequest::optype() const {
  // @@protoc_insertion_point(field_get:msg.ServiceRequest.optype)
  return _internal_optype();
}
inline void ServiceRequest::_internal_set_optype(::msg::ServiceRequest_ServiceOptype value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.optype_ = value;
}
inline void ServiceRequest::set_optype(::msg::ServiceRequest_ServiceOptype value) {
  _internal_set_optype(value);
  // @@protoc_insertion_point(field_set:msg.ServiceRequest.optype)
}

// optional .msg.ServiceRequest.Address address = 3;
inline bool ServiceRequest::_internal_has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.address_ != nullptr);
  return value;
}
inline bool ServiceRequest::has_address() const {
  return _internal_has_address();
}
inline void ServiceRequest::clear_address() {
  if (_impl_.address_ != nullptr) _impl_.address_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::ServiceRequest_Address& ServiceRequest::_internal_address() const {
  const ::msg::ServiceRequest_Address* p = _impl_.address_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::ServiceRequest_Address&>(
      ::msg::_ServiceRequest_Address_default_instance_);
}
inline const ::msg::ServiceRequest_Address& ServiceRequest::address() const {
  // @@protoc_insertion_point(field_get:msg.ServiceRequest.address)
  return _internal_address();
}
inline void ServiceRequest::unsafe_arena_set_allocated_address(
    ::msg::ServiceRequest_Address* address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.address_);
  }
  _impl_.address_ = address;
  if (address) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ServiceRequest.address)
}
inline ::msg::ServiceRequest_Address* ServiceRequest::release_address() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::ServiceRequest_Address* temp = _impl_.address_;
  _impl_.address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::ServiceRequest_Address* ServiceRequest::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:msg.ServiceRequest.address)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::ServiceRequest_Address* temp = _impl_.address_;
  _impl_.address_ = nullptr;
  return temp;
}
inline ::msg::ServiceRequest_Address* ServiceRequest::_internal_mutable_address() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.address_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::ServiceRequest_Address>(GetArenaForAllocation());
    _impl_.address_ = p;
  }
  return _impl_.address_;
}
inline ::msg::ServiceRequest_Address* ServiceRequest::mutable_address() {
  ::msg::ServiceRequest_Address* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:msg.ServiceRequest.address)
  return _msg;
}
inline void ServiceRequest::set_allocated_address(::msg::ServiceRequest_Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address);
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.address_ = address;
  // @@protoc_insertion_point(field_set_allocated:msg.ServiceRequest.address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::TopicRequest_TopicOptype> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::TopicRequest_TopicOptype>() {
  return ::msg::TopicRequest_TopicOptype_descriptor();
}
template <> struct is_proto_enum< ::msg::ServiceRequest_ServiceOptype> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ServiceRequest_ServiceOptype>() {
  return ::msg::ServiceRequest_ServiceOptype_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RpcRequest_2eproto
