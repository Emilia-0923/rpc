// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcResponse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RpcResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RpcResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RpcResponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RpcResponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RpcResponse_2eproto;
namespace msg {
class RpcResponse;
struct RpcResponseDefaultTypeInternal;
extern RpcResponseDefaultTypeInternal _RpcResponse_default_instance_;
class ServiceResponse;
struct ServiceResponseDefaultTypeInternal;
extern ServiceResponseDefaultTypeInternal _ServiceResponse_default_instance_;
class ServiceResponse_Address;
struct ServiceResponse_AddressDefaultTypeInternal;
extern ServiceResponse_AddressDefaultTypeInternal _ServiceResponse_Address_default_instance_;
class TopicResponse;
struct TopicResponseDefaultTypeInternal;
extern TopicResponseDefaultTypeInternal _TopicResponse_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::RpcResponse* Arena::CreateMaybeMessage<::msg::RpcResponse>(Arena*);
template<> ::msg::ServiceResponse* Arena::CreateMaybeMessage<::msg::ServiceResponse>(Arena*);
template<> ::msg::ServiceResponse_Address* Arena::CreateMaybeMessage<::msg::ServiceResponse_Address>(Arena*);
template<> ::msg::TopicResponse* Arena::CreateMaybeMessage<::msg::TopicResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum ServiceResponse_ServiceOptype : int {
  ServiceResponse_ServiceOptype_REGISTRY = 0,
  ServiceResponse_ServiceOptype_DISCOVERY = 1,
  ServiceResponse_ServiceOptype_ONLINE = 2,
  ServiceResponse_ServiceOptype_OFFLINE = 3,
  ServiceResponse_ServiceOptype_ServiceResponse_ServiceOptype_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServiceResponse_ServiceOptype_ServiceResponse_ServiceOptype_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServiceResponse_ServiceOptype_IsValid(int value);
constexpr ServiceResponse_ServiceOptype ServiceResponse_ServiceOptype_ServiceOptype_MIN = ServiceResponse_ServiceOptype_REGISTRY;
constexpr ServiceResponse_ServiceOptype ServiceResponse_ServiceOptype_ServiceOptype_MAX = ServiceResponse_ServiceOptype_OFFLINE;
constexpr int ServiceResponse_ServiceOptype_ServiceOptype_ARRAYSIZE = ServiceResponse_ServiceOptype_ServiceOptype_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceResponse_ServiceOptype_descriptor();
template<typename T>
inline const std::string& ServiceResponse_ServiceOptype_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceResponse_ServiceOptype>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceResponse_ServiceOptype_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceResponse_ServiceOptype_descriptor(), enum_t_value);
}
inline bool ServiceResponse_ServiceOptype_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceResponse_ServiceOptype* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceResponse_ServiceOptype>(
    ServiceResponse_ServiceOptype_descriptor(), name, value);
}
enum RetCode : int {
  SUCCESS = 0,
  PARSE_FAILED = 1,
  INVALID_MSG = 2,
  INVALID_PARAMS = 3,
  DISCONNECTED = 4,
  NOT_FOUND_SERVICE = 5,
  NOT_FOUND_TOPIC = 6,
  RetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RetCode_IsValid(int value);
constexpr RetCode RetCode_MIN = SUCCESS;
constexpr RetCode RetCode_MAX = NOT_FOUND_TOPIC;
constexpr int RetCode_ARRAYSIZE = RetCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RetCode_descriptor();
template<typename T>
inline const std::string& RetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RetCode_descriptor(), enum_t_value);
}
inline bool RetCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RetCode>(
    RetCode_descriptor(), name, value);
}
// ===================================================================

class RpcResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.RpcResponse) */ {
 public:
  inline RpcResponse() : RpcResponse(nullptr) {}
  ~RpcResponse() override;
  explicit PROTOBUF_CONSTEXPR RpcResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcResponse(const RpcResponse& from);
  RpcResponse(RpcResponse&& from) noexcept
    : RpcResponse() {
    *this = ::std::move(from);
  }

  inline RpcResponse& operator=(const RpcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcResponse& operator=(RpcResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcResponse* internal_default_instance() {
    return reinterpret_cast<const RpcResponse*>(
               &_RpcResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcResponse& a, RpcResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcResponse& from) {
    RpcResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.RpcResponse";
  }
  protected:
  explicit RpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kRetcodeFieldNumber = 1,
  };
  // optional string result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // optional .msg.RetCode retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::msg::RetCode retcode() const;
  void set_retcode(::msg::RetCode value);
  private:
  ::msg::RetCode _internal_retcode() const;
  void _internal_set_retcode(::msg::RetCode value);
  public:

  // @@protoc_insertion_point(class_scope:msg.RpcResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    int retcode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RpcResponse_2eproto;
};
// -------------------------------------------------------------------

class TopicResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TopicResponse) */ {
 public:
  inline TopicResponse() : TopicResponse(nullptr) {}
  ~TopicResponse() override;
  explicit PROTOBUF_CONSTEXPR TopicResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicResponse(const TopicResponse& from);
  TopicResponse(TopicResponse&& from) noexcept
    : TopicResponse() {
    *this = ::std::move(from);
  }

  inline TopicResponse& operator=(const TopicResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicResponse& operator=(TopicResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicResponse* internal_default_instance() {
    return reinterpret_cast<const TopicResponse*>(
               &_TopicResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TopicResponse& a, TopicResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopicResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TopicResponse& from) {
    TopicResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TopicResponse";
  }
  protected:
  explicit TopicResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetcodeFieldNumber = 1,
  };
  // optional .msg.RetCode retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::msg::RetCode retcode() const;
  void set_retcode(::msg::RetCode value);
  private:
  ::msg::RetCode _internal_retcode() const;
  void _internal_set_retcode(::msg::RetCode value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TopicResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int retcode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RpcResponse_2eproto;
};
// -------------------------------------------------------------------

class ServiceResponse_Address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ServiceResponse.Address) */ {
 public:
  inline ServiceResponse_Address() : ServiceResponse_Address(nullptr) {}
  ~ServiceResponse_Address() override;
  explicit PROTOBUF_CONSTEXPR ServiceResponse_Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceResponse_Address(const ServiceResponse_Address& from);
  ServiceResponse_Address(ServiceResponse_Address&& from) noexcept
    : ServiceResponse_Address() {
    *this = ::std::move(from);
  }

  inline ServiceResponse_Address& operator=(const ServiceResponse_Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceResponse_Address& operator=(ServiceResponse_Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceResponse_Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceResponse_Address* internal_default_instance() {
    return reinterpret_cast<const ServiceResponse_Address*>(
               &_ServiceResponse_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServiceResponse_Address& a, ServiceResponse_Address& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceResponse_Address* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceResponse_Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceResponse_Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceResponse_Address>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceResponse_Address& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceResponse_Address& from) {
    ServiceResponse_Address::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceResponse_Address* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ServiceResponse.Address";
  }
  protected:
  explicit ServiceResponse_Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // optional string ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional uint32 port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ServiceResponse.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    uint32_t port_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RpcResponse_2eproto;
};
// -------------------------------------------------------------------

class ServiceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ServiceResponse) */ {
 public:
  inline ServiceResponse() : ServiceResponse(nullptr) {}
  ~ServiceResponse() override;
  explicit PROTOBUF_CONSTEXPR ServiceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceResponse(const ServiceResponse& from);
  ServiceResponse(ServiceResponse&& from) noexcept
    : ServiceResponse() {
    *this = ::std::move(from);
  }

  inline ServiceResponse& operator=(const ServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceResponse& operator=(ServiceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceResponse* internal_default_instance() {
    return reinterpret_cast<const ServiceResponse*>(
               &_ServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServiceResponse& a, ServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceResponse& from) {
    ServiceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ServiceResponse";
  }
  protected:
  explicit ServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServiceResponse_Address Address;

  typedef ServiceResponse_ServiceOptype ServiceOptype;
  static constexpr ServiceOptype REGISTRY =
    ServiceResponse_ServiceOptype_REGISTRY;
  static constexpr ServiceOptype DISCOVERY =
    ServiceResponse_ServiceOptype_DISCOVERY;
  static constexpr ServiceOptype ONLINE =
    ServiceResponse_ServiceOptype_ONLINE;
  static constexpr ServiceOptype OFFLINE =
    ServiceResponse_ServiceOptype_OFFLINE;
  static inline bool ServiceOptype_IsValid(int value) {
    return ServiceResponse_ServiceOptype_IsValid(value);
  }
  static constexpr ServiceOptype ServiceOptype_MIN =
    ServiceResponse_ServiceOptype_ServiceOptype_MIN;
  static constexpr ServiceOptype ServiceOptype_MAX =
    ServiceResponse_ServiceOptype_ServiceOptype_MAX;
  static constexpr int ServiceOptype_ARRAYSIZE =
    ServiceResponse_ServiceOptype_ServiceOptype_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ServiceOptype_descriptor() {
    return ServiceResponse_ServiceOptype_descriptor();
  }
  template<typename T>
  static inline const std::string& ServiceOptype_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServiceOptype>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServiceOptype_Name.");
    return ServiceResponse_ServiceOptype_Name(enum_t_value);
  }
  static inline bool ServiceOptype_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ServiceOptype* value) {
    return ServiceResponse_ServiceOptype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 4,
    kMethodFieldNumber = 2,
    kRetcodeFieldNumber = 1,
    kOptypeFieldNumber = 3,
  };
  // repeated .msg.ServiceResponse.Address address = 4;
  int address_size() const;
  private:
  int _internal_address_size() const;
  public:
  void clear_address();
  ::msg::ServiceResponse_Address* mutable_address(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ServiceResponse_Address >*
      mutable_address();
  private:
  const ::msg::ServiceResponse_Address& _internal_address(int index) const;
  ::msg::ServiceResponse_Address* _internal_add_address();
  public:
  const ::msg::ServiceResponse_Address& address(int index) const;
  ::msg::ServiceResponse_Address* add_address();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ServiceResponse_Address >&
      address() const;

  // optional string method = 2;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // optional .msg.RetCode retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::msg::RetCode retcode() const;
  void set_retcode(::msg::RetCode value);
  private:
  ::msg::RetCode _internal_retcode() const;
  void _internal_set_retcode(::msg::RetCode value);
  public:

  // optional .msg.ServiceResponse.ServiceOptype optype = 3;
  bool has_optype() const;
  private:
  bool _internal_has_optype() const;
  public:
  void clear_optype();
  ::msg::ServiceResponse_ServiceOptype optype() const;
  void set_optype(::msg::ServiceResponse_ServiceOptype value);
  private:
  ::msg::ServiceResponse_ServiceOptype _internal_optype() const;
  void _internal_set_optype(::msg::ServiceResponse_ServiceOptype value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ServiceResponse_Address > address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
    int retcode_;
    int optype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RpcResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcResponse

// optional .msg.RetCode retcode = 1;
inline bool RpcResponse::_internal_has_retcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RpcResponse::has_retcode() const {
  return _internal_has_retcode();
}
inline void RpcResponse::clear_retcode() {
  _impl_.retcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::msg::RetCode RpcResponse::_internal_retcode() const {
  return static_cast< ::msg::RetCode >(_impl_.retcode_);
}
inline ::msg::RetCode RpcResponse::retcode() const {
  // @@protoc_insertion_point(field_get:msg.RpcResponse.retcode)
  return _internal_retcode();
}
inline void RpcResponse::_internal_set_retcode(::msg::RetCode value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.retcode_ = value;
}
inline void RpcResponse::set_retcode(::msg::RetCode value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:msg.RpcResponse.retcode)
}

// optional string result = 2;
inline bool RpcResponse::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcResponse::has_result() const {
  return _internal_has_result();
}
inline void RpcResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcResponse::result() const {
  // @@protoc_insertion_point(field_get:msg.RpcResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcResponse::set_result(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.RpcResponse.result)
}
inline std::string* RpcResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:msg.RpcResponse.result)
  return _s;
}
inline const std::string& RpcResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void RpcResponse::_internal_set_result(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcResponse::_internal_mutable_result() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcResponse::release_result() {
  // @@protoc_insertion_point(field_release:msg.RpcResponse.result)
  if (!_internal_has_result()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.result_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.RpcResponse.result)
}

// -------------------------------------------------------------------

// TopicResponse

// optional .msg.RetCode retcode = 1;
inline bool TopicResponse::_internal_has_retcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TopicResponse::has_retcode() const {
  return _internal_has_retcode();
}
inline void TopicResponse::clear_retcode() {
  _impl_.retcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::msg::RetCode TopicResponse::_internal_retcode() const {
  return static_cast< ::msg::RetCode >(_impl_.retcode_);
}
inline ::msg::RetCode TopicResponse::retcode() const {
  // @@protoc_insertion_point(field_get:msg.TopicResponse.retcode)
  return _internal_retcode();
}
inline void TopicResponse::_internal_set_retcode(::msg::RetCode value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.retcode_ = value;
}
inline void TopicResponse::set_retcode(::msg::RetCode value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:msg.TopicResponse.retcode)
}

// -------------------------------------------------------------------

// ServiceResponse_Address

// optional string ip = 1;
inline bool ServiceResponse_Address::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceResponse_Address::has_ip() const {
  return _internal_has_ip();
}
inline void ServiceResponse_Address::clear_ip() {
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceResponse_Address::ip() const {
  // @@protoc_insertion_point(field_get:msg.ServiceResponse.Address.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceResponse_Address::set_ip(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ServiceResponse.Address.ip)
}
inline std::string* ServiceResponse_Address::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:msg.ServiceResponse.Address.ip)
  return _s;
}
inline const std::string& ServiceResponse_Address::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void ServiceResponse_Address::_internal_set_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceResponse_Address::_internal_mutable_ip() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceResponse_Address::release_ip() {
  // @@protoc_insertion_point(field_release:msg.ServiceResponse.Address.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceResponse_Address::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ServiceResponse.Address.ip)
}

// optional uint32 port = 2;
inline bool ServiceResponse_Address::_internal_has_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServiceResponse_Address::has_port() const {
  return _internal_has_port();
}
inline void ServiceResponse_Address::clear_port() {
  _impl_.port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ServiceResponse_Address::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t ServiceResponse_Address::port() const {
  // @@protoc_insertion_point(field_get:msg.ServiceResponse.Address.port)
  return _internal_port();
}
inline void ServiceResponse_Address::_internal_set_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.port_ = value;
}
inline void ServiceResponse_Address::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:msg.ServiceResponse.Address.port)
}

// -------------------------------------------------------------------

// ServiceResponse

// optional .msg.RetCode retcode = 1;
inline bool ServiceResponse::_internal_has_retcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServiceResponse::has_retcode() const {
  return _internal_has_retcode();
}
inline void ServiceResponse::clear_retcode() {
  _impl_.retcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::msg::RetCode ServiceResponse::_internal_retcode() const {
  return static_cast< ::msg::RetCode >(_impl_.retcode_);
}
inline ::msg::RetCode ServiceResponse::retcode() const {
  // @@protoc_insertion_point(field_get:msg.ServiceResponse.retcode)
  return _internal_retcode();
}
inline void ServiceResponse::_internal_set_retcode(::msg::RetCode value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.retcode_ = value;
}
inline void ServiceResponse::set_retcode(::msg::RetCode value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:msg.ServiceResponse.retcode)
}

// optional string method = 2;
inline bool ServiceResponse::_internal_has_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceResponse::has_method() const {
  return _internal_has_method();
}
inline void ServiceResponse::clear_method() {
  _impl_.method_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceResponse::method() const {
  // @@protoc_insertion_point(field_get:msg.ServiceResponse.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceResponse::set_method(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ServiceResponse.method)
}
inline std::string* ServiceResponse::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:msg.ServiceResponse.method)
  return _s;
}
inline const std::string& ServiceResponse::_internal_method() const {
  return _impl_.method_.Get();
}
inline void ServiceResponse::_internal_set_method(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.method_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceResponse::_internal_mutable_method() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.method_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceResponse::release_method() {
  // @@protoc_insertion_point(field_release:msg.ServiceResponse.method)
  if (!_internal_has_method()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.method_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceResponse::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ServiceResponse.method)
}

// optional .msg.ServiceResponse.ServiceOptype optype = 3;
inline bool ServiceResponse::_internal_has_optype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServiceResponse::has_optype() const {
  return _internal_has_optype();
}
inline void ServiceResponse::clear_optype() {
  _impl_.optype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::msg::ServiceResponse_ServiceOptype ServiceResponse::_internal_optype() const {
  return static_cast< ::msg::ServiceResponse_ServiceOptype >(_impl_.optype_);
}
inline ::msg::ServiceResponse_ServiceOptype ServiceResponse::optype() const {
  // @@protoc_insertion_point(field_get:msg.ServiceResponse.optype)
  return _internal_optype();
}
inline void ServiceResponse::_internal_set_optype(::msg::ServiceResponse_ServiceOptype value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.optype_ = value;
}
inline void ServiceResponse::set_optype(::msg::ServiceResponse_ServiceOptype value) {
  _internal_set_optype(value);
  // @@protoc_insertion_point(field_set:msg.ServiceResponse.optype)
}

// repeated .msg.ServiceResponse.Address address = 4;
inline int ServiceResponse::_internal_address_size() const {
  return _impl_.address_.size();
}
inline int ServiceResponse::address_size() const {
  return _internal_address_size();
}
inline void ServiceResponse::clear_address() {
  _impl_.address_.Clear();
}
inline ::msg::ServiceResponse_Address* ServiceResponse::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ServiceResponse.address)
  return _impl_.address_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ServiceResponse_Address >*
ServiceResponse::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:msg.ServiceResponse.address)
  return &_impl_.address_;
}
inline const ::msg::ServiceResponse_Address& ServiceResponse::_internal_address(int index) const {
  return _impl_.address_.Get(index);
}
inline const ::msg::ServiceResponse_Address& ServiceResponse::address(int index) const {
  // @@protoc_insertion_point(field_get:msg.ServiceResponse.address)
  return _internal_address(index);
}
inline ::msg::ServiceResponse_Address* ServiceResponse::_internal_add_address() {
  return _impl_.address_.Add();
}
inline ::msg::ServiceResponse_Address* ServiceResponse::add_address() {
  ::msg::ServiceResponse_Address* _add = _internal_add_address();
  // @@protoc_insertion_point(field_add:msg.ServiceResponse.address)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ServiceResponse_Address >&
ServiceResponse::address() const {
  // @@protoc_insertion_point(field_list:msg.ServiceResponse.address)
  return _impl_.address_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::ServiceResponse_ServiceOptype> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ServiceResponse_ServiceOptype>() {
  return ::msg::ServiceResponse_ServiceOptype_descriptor();
}
template <> struct is_proto_enum< ::msg::RetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::RetCode>() {
  return ::msg::RetCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RpcResponse_2eproto
