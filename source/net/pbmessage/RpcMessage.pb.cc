// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcMessage.proto

#include "RpcMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace msg {
PROTOBUF_CONSTEXPR Address::Address(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0} {}
struct AddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddressDefaultTypeInternal() {}
  union {
    Address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddressDefaultTypeInternal _Address_default_instance_;
PROTOBUF_CONSTEXPR RpcRequest::RpcRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RpcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcRequestDefaultTypeInternal() {}
  union {
    RpcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcRequestDefaultTypeInternal _RpcRequest_default_instance_;
PROTOBUF_CONSTEXPR TopicRequest::TopicRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optype_)*/0} {}
struct TopicRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopicRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopicRequestDefaultTypeInternal() {}
  union {
    TopicRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopicRequestDefaultTypeInternal _TopicRequest_default_instance_;
PROTOBUF_CONSTEXPR ServiceRequest::ServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/nullptr
  , /*decltype(_impl_.optype_)*/0} {}
struct ServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceRequestDefaultTypeInternal() {}
  union {
    ServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceRequestDefaultTypeInternal _ServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR RpcResponse::RpcResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.retcode_)*/0} {}
struct RpcResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcResponseDefaultTypeInternal() {}
  union {
    RpcResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcResponseDefaultTypeInternal _RpcResponse_default_instance_;
PROTOBUF_CONSTEXPR TopicResponse::TopicResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.retcode_)*/0} {}
struct TopicResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopicResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopicResponseDefaultTypeInternal() {}
  union {
    TopicResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopicResponseDefaultTypeInternal _TopicResponse_default_instance_;
PROTOBUF_CONSTEXPR ServiceResponse::ServiceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/{}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.retcode_)*/0
  , /*decltype(_impl_.optype_)*/0} {}
struct ServiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceResponseDefaultTypeInternal() {}
  union {
    ServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceResponseDefaultTypeInternal _ServiceResponse_default_instance_;
}  // namespace msg
static ::_pb::Metadata file_level_metadata_RpcMessage_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_RpcMessage_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_RpcMessage_2eproto = nullptr;

const uint32_t TableStruct_RpcMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::msg::Address, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Address, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::msg::Address, _impl_.port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::RpcRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::RpcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::RpcRequest, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::msg::RpcRequest, _impl_.params_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::TopicRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::TopicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TopicRequest, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::msg::TopicRequest, _impl_.optype_),
  PROTOBUF_FIELD_OFFSET(::msg::TopicRequest, _impl_.message_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::ServiceRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::ServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ServiceRequest, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::msg::ServiceRequest, _impl_.optype_),
  PROTOBUF_FIELD_OFFSET(::msg::ServiceRequest, _impl_.address_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::RpcResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::RpcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::RpcResponse, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::msg::RpcResponse, _impl_.result_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::msg::TopicResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::TopicResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TopicResponse, _impl_.retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::ServiceResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::ServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ServiceResponse, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::msg::ServiceResponse, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::msg::ServiceResponse, _impl_.optype_),
  PROTOBUF_FIELD_OFFSET(::msg::ServiceResponse, _impl_.address_),
  1,
  0,
  2,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::msg::Address)},
  { 10, 18, -1, sizeof(::msg::RpcRequest)},
  { 20, 29, -1, sizeof(::msg::TopicRequest)},
  { 32, 41, -1, sizeof(::msg::ServiceRequest)},
  { 44, 52, -1, sizeof(::msg::RpcResponse)},
  { 54, 61, -1, sizeof(::msg::TopicResponse)},
  { 62, 72, -1, sizeof(::msg::ServiceResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::msg::_Address_default_instance_._instance,
  &::msg::_RpcRequest_default_instance_._instance,
  &::msg::_TopicRequest_default_instance_._instance,
  &::msg::_ServiceRequest_default_instance_._instance,
  &::msg::_RpcResponse_default_instance_._instance,
  &::msg::_TopicResponse_default_instance_._instance,
  &::msg::_ServiceResponse_default_instance_._instance,
};

const char descriptor_table_protodef_RpcMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020RpcMessage.proto\022\003msg\"=\n\007Address\022\017\n\002ip"
  "\030\001 \001(\tH\000\210\001\001\022\021\n\004port\030\002 \001(\005H\001\210\001\001B\005\n\003_ipB\007\n"
  "\005_port\"<\n\nRpcRequest\022\023\n\006method\030\001 \001(\tH\000\210\001"
  "\001\022\016\n\006params\030\002 \003(\tB\t\n\007_method\"n\n\014TopicReq"
  "uest\022\022\n\005topic\030\001 \001(\tH\000\210\001\001\022\023\n\006optype\030\002 \001(\005"
  "H\001\210\001\001\022\024\n\007message\030\003 \001(\tH\002\210\001\001B\010\n\006_topicB\t\n"
  "\007_optypeB\n\n\010_message\"\200\001\n\016ServiceRequest\022"
  "\023\n\006method\030\001 \001(\tH\000\210\001\001\022\023\n\006optype\030\002 \001(\005H\001\210\001"
  "\001\022\"\n\007address\030\003 \001(\0132\014.msg.AddressH\002\210\001\001B\t\n"
  "\007_methodB\t\n\007_optypeB\n\n\010_address\"O\n\013RpcRe"
  "sponse\022\024\n\007retcode\030\001 \001(\005H\000\210\001\001\022\023\n\006result\030\002"
  " \001(\tH\001\210\001\001B\n\n\010_retcodeB\t\n\007_result\"1\n\rTopi"
  "cResponse\022\024\n\007retcode\030\001 \001(\005H\000\210\001\001B\n\n\010_retc"
  "ode\"\222\001\n\017ServiceResponse\022\024\n\007retcode\030\001 \001(\005"
  "H\000\210\001\001\022\023\n\006method\030\002 \001(\tH\001\210\001\001\022\023\n\006optype\030\003 \001"
  "(\005H\002\210\001\001\022\035\n\007address\030\004 \003(\0132\014.msg.AddressB\n"
  "\n\010_retcodeB\t\n\007_methodB\t\n\007_optypeb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_RpcMessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_RpcMessage_2eproto = {
    false, false, 680, descriptor_table_protodef_RpcMessage_2eproto,
    "RpcMessage.proto",
    &descriptor_table_RpcMessage_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_RpcMessage_2eproto::offsets,
    file_level_metadata_RpcMessage_2eproto, file_level_enum_descriptors_RpcMessage_2eproto,
    file_level_service_descriptors_RpcMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_RpcMessage_2eproto_getter() {
  return &descriptor_table_RpcMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_RpcMessage_2eproto(&descriptor_table_RpcMessage_2eproto);
namespace msg {

// ===================================================================

class Address::_Internal {
 public:
  using HasBits = decltype(std::declval<Address>()._impl_._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Address::Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Address* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:msg.Address)
}

inline void Address::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){0}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:msg.Address)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Address::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
}

void Address::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Address)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.ip_.ClearNonDefaultToEmpty();
  }
  _impl_.port_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.Address.ip"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Address::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Address)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string ip = 1;
  if (_internal_has_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.Address.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // optional int32 port = 2;
  if (_internal_has_port()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Address)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

    // optional int32 port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Address::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Address::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Address::GetClassData() const { return &_class_data_; }


void Address::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Address*>(&to_msg);
  auto& from = static_cast<const Address&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Address)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.port_ = from._impl_.port_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RpcMessage_2eproto_getter, &descriptor_table_RpcMessage_2eproto_once,
      file_level_metadata_RpcMessage_2eproto[0]);
}

// ===================================================================

class RpcRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcRequest>()._impl_._has_bits_);
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RpcRequest::RpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.RpcRequest)
}
RpcRequest::RpcRequest(const RpcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){from._impl_.params_}
    , decltype(_impl_.method_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.RpcRequest)
}

inline void RpcRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){arena}
    , decltype(_impl_.method_){}
  };
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcRequest::~RpcRequest() {
  // @@protoc_insertion_point(destructor:msg.RpcRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedPtrField();
  _impl_.method_.Destroy();
}

void RpcRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.RpcRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.method_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.RpcRequest.method"));
        } else
          goto handle_unusual;
        continue;
      // repeated string params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_params();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.RpcRequest.params"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.RpcRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string method = 1;
  if (_internal_has_method()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.RpcRequest.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // repeated string params = 2;
  for (int i = 0, n = this->_internal_params_size(); i < n; i++) {
    const auto& s = this->_internal_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.RpcRequest.params");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.RpcRequest)
  return target;
}

size_t RpcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.RpcRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string params = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.params_.size());
  for (int i = 0, n = _impl_.params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.params_.Get(i));
  }

  // optional string method = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcRequest::GetClassData() const { return &_class_data_; }


void RpcRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcRequest*>(&to_msg);
  auto& from = static_cast<const RpcRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.RpcRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  if (from._internal_has_method()) {
    _this->_internal_set_method(from._internal_method());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcRequest::CopyFrom(const RpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.RpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequest::IsInitialized() const {
  return true;
}

void RpcRequest::InternalSwap(RpcRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RpcMessage_2eproto_getter, &descriptor_table_RpcMessage_2eproto_once,
      file_level_metadata_RpcMessage_2eproto[1]);
}

// ===================================================================

class TopicRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TopicRequest>()._impl_._has_bits_);
  static void set_has_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TopicRequest::TopicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TopicRequest)
}
TopicRequest::TopicRequest(const TopicRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TopicRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.optype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_topic()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.optype_ = from._impl_.optype_;
  // @@protoc_insertion_point(copy_constructor:msg.TopicRequest)
}

inline void TopicRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.optype_){0}
  };
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TopicRequest::~TopicRequest() {
  // @@protoc_insertion_point(destructor:msg.TopicRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_.Destroy();
  _impl_.message_.Destroy();
}

void TopicRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TopicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TopicRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.optype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopicRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TopicRequest.topic"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 optype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_optype(&has_bits);
          _impl_.optype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TopicRequest.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopicRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TopicRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string topic = 1;
  if (_internal_has_topic()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TopicRequest.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // optional int32 optype = 2;
  if (_internal_has_optype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_optype(), target);
  }

  // optional string message = 3;
  if (_internal_has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TopicRequest.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TopicRequest)
  return target;
}

size_t TopicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TopicRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string topic = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_topic());
    }

    // optional string message = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional int32 optype = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_optype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopicRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TopicRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopicRequest::GetClassData() const { return &_class_data_; }


void TopicRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TopicRequest*>(&to_msg);
  auto& from = static_cast<const TopicRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TopicRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_topic(from._internal_topic());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.optype_ = from._impl_.optype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopicRequest::CopyFrom(const TopicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicRequest::IsInitialized() const {
  return true;
}

void TopicRequest::InternalSwap(TopicRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.optype_, other->_impl_.optype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RpcMessage_2eproto_getter, &descriptor_table_RpcMessage_2eproto_once,
      file_level_metadata_RpcMessage_2eproto[2]);
}

// ===================================================================

class ServiceRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceRequest>()._impl_._has_bits_);
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::msg::Address& address(const ServiceRequest* msg);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::msg::Address&
ServiceRequest::_Internal::address(const ServiceRequest* msg) {
  return *msg->_impl_.address_;
}
ServiceRequest::ServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ServiceRequest)
}
ServiceRequest::ServiceRequest(const ServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.method_){}
    , decltype(_impl_.address_){nullptr}
    , decltype(_impl_.optype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_address()) {
    _this->_impl_.address_ = new ::msg::Address(*from._impl_.address_);
  }
  _this->_impl_.optype_ = from._impl_.optype_;
  // @@protoc_insertion_point(copy_constructor:msg.ServiceRequest)
}

inline void ServiceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.method_){}
    , decltype(_impl_.address_){nullptr}
    , decltype(_impl_.optype_){0}
  };
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceRequest::~ServiceRequest() {
  // @@protoc_insertion_point(destructor:msg.ServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.method_.Destroy();
  if (this != internal_default_instance()) delete _impl_.address_;
}

void ServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.method_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.address_ != nullptr);
      _impl_.address_->Clear();
    }
  }
  _impl_.optype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ServiceRequest.method"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 optype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_optype(&has_bits);
          _impl_.optype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .msg.Address address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string method = 1;
  if (_internal_has_method()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ServiceRequest.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // optional int32 optype = 2;
  if (_internal_has_optype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_optype(), target);
  }

  // optional .msg.Address address = 3;
  if (_internal_has_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ServiceRequest)
  return target;
}

size_t ServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string method = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_method());
    }

    // optional .msg.Address address = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.address_);
    }

    // optional int32 optype = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_optype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceRequest::GetClassData() const { return &_class_data_; }


void ServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceRequest*>(&to_msg);
  auto& from = static_cast<const ServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ServiceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_method(from._internal_method());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_address()->::msg::Address::MergeFrom(
          from._internal_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.optype_ = from._impl_.optype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceRequest::CopyFrom(const ServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRequest::IsInitialized() const {
  return true;
}

void ServiceRequest::InternalSwap(ServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceRequest, _impl_.optype_)
      + sizeof(ServiceRequest::_impl_.optype_)
      - PROTOBUF_FIELD_OFFSET(ServiceRequest, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RpcMessage_2eproto_getter, &descriptor_table_RpcMessage_2eproto_once,
      file_level_metadata_RpcMessage_2eproto[3]);
}

// ===================================================================

class RpcResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcResponse>()._impl_._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RpcResponse::RpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.RpcResponse)
}
RpcResponse::RpcResponse(const RpcResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}
    , decltype(_impl_.retcode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_result()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:msg.RpcResponse)
}

inline void RpcResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}
    , decltype(_impl_.retcode_){0}
  };
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcResponse::~RpcResponse() {
  // @@protoc_insertion_point(destructor:msg.RpcResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.Destroy();
}

void RpcResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.RpcResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.result_.ClearNonDefaultToEmpty();
  }
  _impl_.retcode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.RpcResponse.result"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.RpcResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 retcode = 1;
  if (_internal_has_retcode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional string result = 2;
  if (_internal_has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.RpcResponse.result");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.RpcResponse)
  return target;
}

size_t RpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.RpcResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string result = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_result());
    }

    // optional int32 retcode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_retcode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcResponse::GetClassData() const { return &_class_data_; }


void RpcResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcResponse*>(&to_msg);
  auto& from = static_cast<const RpcResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.RpcResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_result(from._internal_result());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.retcode_ = from._impl_.retcode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcResponse::CopyFrom(const RpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.RpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResponse::IsInitialized() const {
  return true;
}

void RpcResponse::InternalSwap(RpcResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RpcMessage_2eproto_getter, &descriptor_table_RpcMessage_2eproto_once,
      file_level_metadata_RpcMessage_2eproto[4]);
}

// ===================================================================

class TopicResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TopicResponse>()._impl_._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TopicResponse::TopicResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TopicResponse)
}
TopicResponse::TopicResponse(const TopicResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TopicResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.retcode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:msg.TopicResponse)
}

inline void TopicResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.retcode_){0}
  };
}

TopicResponse::~TopicResponse() {
  // @@protoc_insertion_point(destructor:msg.TopicResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopicResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TopicResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TopicResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TopicResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopicResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopicResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TopicResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 retcode = 1;
  if (_internal_has_retcode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TopicResponse)
  return target;
}

size_t TopicResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TopicResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 retcode = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopicResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TopicResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopicResponse::GetClassData() const { return &_class_data_; }


void TopicResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TopicResponse*>(&to_msg);
  auto& from = static_cast<const TopicResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TopicResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopicResponse::CopyFrom(const TopicResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TopicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicResponse::IsInitialized() const {
  return true;
}

void TopicResponse::InternalSwap(TopicResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RpcMessage_2eproto_getter, &descriptor_table_RpcMessage_2eproto_once,
      file_level_metadata_RpcMessage_2eproto[5]);
}

// ===================================================================

class ServiceResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceResponse>()._impl_._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ServiceResponse::ServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ServiceResponse)
}
ServiceResponse::ServiceResponse(const ServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_){from._impl_.address_}
    , decltype(_impl_.method_){}
    , decltype(_impl_.retcode_){}
    , decltype(_impl_.optype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.retcode_, &from._impl_.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.optype_) -
    reinterpret_cast<char*>(&_impl_.retcode_)) + sizeof(_impl_.optype_));
  // @@protoc_insertion_point(copy_constructor:msg.ServiceResponse)
}

inline void ServiceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_){arena}
    , decltype(_impl_.method_){}
    , decltype(_impl_.retcode_){0}
    , decltype(_impl_.optype_){0}
  };
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceResponse::~ServiceResponse() {
  // @@protoc_insertion_point(destructor:msg.ServiceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.~RepeatedPtrField();
  _impl_.method_.Destroy();
}

void ServiceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ServiceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.method_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.retcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.optype_) -
        reinterpret_cast<char*>(&_impl_.retcode_)) + sizeof(_impl_.optype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ServiceResponse.method"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 optype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_optype(&has_bits);
          _impl_.optype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Address address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_address(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ServiceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 retcode = 1;
  if (_internal_has_retcode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional string method = 2;
  if (_internal_has_method()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ServiceResponse.method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method(), target);
  }

  // optional int32 optype = 3;
  if (_internal_has_optype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_optype(), target);
  }

  // repeated .msg.Address address = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_address_size()); i < n; i++) {
    const auto& repfield = this->_internal_address(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ServiceResponse)
  return target;
}

size_t ServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ServiceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.Address address = 4;
  total_size += 1UL * this->_internal_address_size();
  for (const auto& msg : this->_impl_.address_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string method = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_method());
    }

    // optional int32 retcode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_retcode());
    }

    // optional int32 optype = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_optype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceResponse::GetClassData() const { return &_class_data_; }


void ServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceResponse*>(&to_msg);
  auto& from = static_cast<const ServiceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ServiceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.address_.MergeFrom(from._impl_.address_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_method(from._internal_method());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.retcode_ = from._impl_.retcode_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.optype_ = from._impl_.optype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceResponse::CopyFrom(const ServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceResponse::IsInitialized() const {
  return true;
}

void ServiceResponse::InternalSwap(ServiceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.address_.InternalSwap(&other->_impl_.address_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceResponse, _impl_.optype_)
      + sizeof(ServiceResponse::_impl_.optype_)
      - PROTOBUF_FIELD_OFFSET(ServiceResponse, _impl_.retcode_)>(
          reinterpret_cast<char*>(&_impl_.retcode_),
          reinterpret_cast<char*>(&other->_impl_.retcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RpcMessage_2eproto_getter, &descriptor_table_RpcMessage_2eproto_once,
      file_level_metadata_RpcMessage_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::Address*
Arena::CreateMaybeMessage< ::msg::Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Address >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::RpcRequest*
Arena::CreateMaybeMessage< ::msg::RpcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::RpcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TopicRequest*
Arena::CreateMaybeMessage< ::msg::TopicRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TopicRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ServiceRequest*
Arena::CreateMaybeMessage< ::msg::ServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::RpcResponse*
Arena::CreateMaybeMessage< ::msg::RpcResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::RpcResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TopicResponse*
Arena::CreateMaybeMessage< ::msg::TopicResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TopicResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ServiceResponse*
Arena::CreateMaybeMessage< ::msg::ServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ServiceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
